server {
	listen 80 default_server;
  listen [::]:80 default_server;
  server_name _;
  return 301 https://$host$request_uri;
}

server {
  listen 8080;

   location / {
    proxy_pass http://node:3000;
    }
}

server {
  listen 443 ssl http2;
  listen [::]:443 ssl http2;
  server_name aws-nginx-proxy;
 	ssl_certificate /etc/nginx/selfsigned.crt;
 	ssl_certificate_key /etc/nginx/selfsigned.key;
  ssl_dhparam /etc/nginx/dhparam.pem;
  ssl_protocols TLSv1.2 TLSv1.1 TLSv1;
  ssl_prefer_server_ciphers on;
  ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;
  ssl_buffer_size 8k;
  ssl_session_cache shared:SSL:30m;
  ssl_session_timeout 30m;
  add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload";

  location / {
    proxy_pass http://node:3000;
    proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
    proxy_set_header X-HTTPS 'True';
    proxy_set_header Accept-Encoding "";
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    add_header Front-End-Https on;

    proxy_redirect off;
  }
}